// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// blm_cpp
Rcpp::List blm_cpp(const arma::mat& Y, const arma::mat& X, const int& S, const Rcpp::List& prior);
RcppExport SEXP _btse_blm_cpp(SEXP YSEXP, SEXP XSEXP, SEXP SSEXP, SEXP priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prior(priorSEXP);
    rcpp_result_gen = Rcpp::wrap(blm_cpp(Y, X, S, prior));
    return rcpp_result_gen;
END_RCPP
}
// bvar_cpp
Rcpp::List bvar_cpp(const arma::mat& Y, const int& p, const int& S, const Rcpp::List& prior);
RcppExport SEXP _btse_bvar_cpp(SEXP YSEXP, SEXP pSEXP, SEXP SSEXP, SEXP priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prior(priorSEXP);
    rcpp_result_gen = Rcpp::wrap(bvar_cpp(Y, p, S, prior));
    return rcpp_result_gen;
END_RCPP
}
// estimate_irf_cpp
Rcpp::List estimate_irf_cpp(Rcpp::List posterior, const int& periods);
RcppExport SEXP _btse_estimate_irf_cpp(SEXP posteriorSEXP, SEXP periodsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type posterior(posteriorSEXP);
    Rcpp::traits::input_parameter< const int& >::type periods(periodsSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_irf_cpp(posterior, periods));
    return rcpp_result_gen;
END_RCPP
}
// identify_longrun_cpp
Rcpp::List identify_longrun_cpp(Rcpp::List posterior);
RcppExport SEXP _btse_identify_longrun_cpp(SEXP posteriorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type posterior(posteriorSEXP);
    rcpp_result_gen = Rcpp::wrap(identify_longrun_cpp(posterior));
    return rcpp_result_gen;
END_RCPP
}
// identify_shortrun_cpp
Rcpp::List identify_shortrun_cpp(Rcpp::List posterior);
RcppExport SEXP _btse_identify_shortrun_cpp(SEXP posteriorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type posterior(posteriorSEXP);
    rcpp_result_gen = Rcpp::wrap(identify_shortrun_cpp(posterior));
    return rcpp_result_gen;
END_RCPP
}
// identify_sign_cpp
Rcpp::List identify_sign_cpp(Rcpp::List posterior, const arma::mat& sign);
RcppExport SEXP _btse_identify_sign_cpp(SEXP posteriorSEXP, SEXP signSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type posterior(posteriorSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sign(signSEXP);
    rcpp_result_gen = Rcpp::wrap(identify_sign_cpp(posterior, sign));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_btse_blm_cpp", (DL_FUNC) &_btse_blm_cpp, 4},
    {"_btse_bvar_cpp", (DL_FUNC) &_btse_bvar_cpp, 4},
    {"_btse_estimate_irf_cpp", (DL_FUNC) &_btse_estimate_irf_cpp, 2},
    {"_btse_identify_longrun_cpp", (DL_FUNC) &_btse_identify_longrun_cpp, 1},
    {"_btse_identify_shortrun_cpp", (DL_FUNC) &_btse_identify_shortrun_cpp, 1},
    {"_btse_identify_sign_cpp", (DL_FUNC) &_btse_identify_sign_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_btse(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
